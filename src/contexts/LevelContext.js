import { createContext, useState, useEffect, useReducer } from "react";
import folderReducer, { editFolderWithPath } from "../reducers/folderReducer";
import { generateUID } from "../scripts/generics";

/*
to-do:
- split sidebar context into NotesDisplayContext
	and FolderDisplayContext
- folder/notes variable structure
	- userdata exists at top level
	- folders exists at top level too
	- there is also current folder and current 
		note states which are the ids of each
	- FolderDisplay get folders from LevelContext and
		does its thing
	- NotesDisplayContext has var just for folder.name
	- NotesDisplay remains pretty unchanged and displays
		notes as normal except by declaring 
		notes = getNotes()
		- also have getFolder() func
*/

export const LevelContext = createContext();

export function LevelContextProvider({ children }) {
    const [dataTheme, setDataTheme] = useState(() => {
        const storedTheme = localStorage.getItem("dataTheme");
        if (!storedTheme) {
            localStorage.setItem("dataTheme", "light");
            return "light";
        }
        return storedTheme;
    });

    useEffect(() => {
        document.documentElement.setAttribute('data-theme', dataTheme);
        localStorage.setItem("dataTheme", dataTheme);
    }, [dataTheme]);

    const color = dataTheme === 'light' ? 'black' : 'white';

    const [folders, dispatch] = useReducer(folderReducer, undefined, () => {
        let initialFolders = [];
        for (let i = 0; i < 4; i++) {
            initialFolders.push({ 
                id: `${i}`,
                title: `Folder ${i}`,
                notes: [],
                folders: [],
            });
        }
        return initialFolders;
    })

    function addFolder(path, title, initialNotes) {
        dispatch({
            type: 'folder/added',
            id: generateUID(),
            path: path || '/', //path where you want to insert---NOT path of the new folder (that's autogenerated)
            title: title || 'New Folder',
            notes: initialNotes || [],
            folders: [],
        })
    }
    
    function changeFolder(path, newFolder) {
        dispatch({
            type: 'folder/changed',
            path: path,
            folder: newFolder,
        })
    }

    function deleteFolder(path) {
        dispatch({
            type: 'folder/deleted',
            path: path,
        })
    }

    function addNote(path, title, description) {
        const id = generateUID()
        dispatch({
            type: 'note/added',
            id: id,
            title: title || `Untitled ${id}`,
            description: description || 'Description',
            path: path || '/Recents',
        })
    }

    function changeNote(path, note) {
        dispatch({
            type: 'note/changed',
            path: path,
            note: note,
        })
    }

    function deleteNote(path) {
        dispatch({
            type: 'note/deleted',
            path: path,
        })
    }

    const [currentFolder, setCurrentFolder] = useState(null)
    const [currentNote, setCurrentNote] = useState(null)

    function getFolder() {
        return editFolderWithPath(folders, )
    }

    function getNote() {
        return getFolder.notes.find((n) => n.id === currentNote)
    }

    const [notes, setNotes] = useState(() => {
        let initialNotes = [];
        for (let i = 0; i < 4; i++) {
            initialNotes.push({ 
                title: `Untitled ${i}`, 
                id: i,
                description: "There's never enough time to do all the nothing you want",
            });
        }
        return initialNotes;
    });

    const [sidebarOpen, setSidebarOpen] = useState(true);

    var [sidebarAnimationTiming, setSidebarAnimationTiming] = useState(0)

    return (
        <LevelContext.Provider value={{
            dataTheme,
            setDataTheme,
            color,
            notes,
            setNotes,
            sidebarOpen,
            setSidebarOpen,
            sidebarAnimationTiming,
            setSidebarAnimationTiming,
            folders,
            addFolder,
            changeFolder,
            deleteFolder,
            addNote,
            changeNote,
            deleteNote,

        }}>
            {children}
        </LevelContext.Provider>
    )
}